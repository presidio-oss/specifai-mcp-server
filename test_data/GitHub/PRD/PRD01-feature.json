{
  "features": [
    {
      "id": "US1",
      "name": "Secure User Account Registration",
      "description": "Ability to register a user account with validation and secure credential storage  \nIn order to access the platform  \nAs a developer or administrator  \nI want to securely create an account and receive confirmation of successful registration.  \n#### Acceptance Criteria:  \n- Users can input and submit email and password to register.  \n- Form fields must validate inputs (e.g., check for valid email formats).  \n- Upon successful registration, users receive a confirmation of account creation.  \n- Credentials are securely stored.",
      "tasks": [
        {
          "list": "Create user registration form with email and password fields in HTML",
          "acceptance": "Design an HTML form that includes fields for email and password input, with a submit button. The email input should have a type of `email` to enforce basic HTML email format validations.  \n#### Acceptance Criteria:  \n- HTML form includes an email input with type `email` and a password input with type `password`.  \n- Submit button is included in the form.  \n- Form structure is semantically correct and meets HTML specifications.  \n- No additional functionalities beyond form layout are implemented.  \n- UI aligns with basic accessibility standards.",
          "id": "TASK1",
          "subTaskTicketId": "HB-6489"
        },
        {
          "list": "Add client-side validation for email and password fields",
          "acceptance": "Implement client-side JavaScript validation to ensure the email input has a proper format and the password is non-empty before form submission.  \n#### Acceptance Criteria:  \n- Email is validated using a regular expression to confirm it matches standard email formats.  \n- Password field must not be empty.  \n- An error message is displayed under any invalid form fields.  \n- Submit button remains disabled until all validations pass.",
          "id": "TASK2",
          "subTaskTicketId": "HB-6491"
        },
        {
          "list": "Develop backend endpoint to handle user registration",
          "acceptance": "Create a Ruby backend endpoint to accept POST requests at `/register` with email and password as parameters.  \n#### Acceptance Criteria:  \n- Endpoint `/register` accepts `application/x-www-form-urlencoded` data format.  \n- Validates that email and password parameters are present and not empty.  \n- Responds with appropriate HTTP status codes: 200 for success, 422 for validation errors, and 500 for internal server errors.  \n- Returns descriptive error messages for invalid requests.",
          "id": "TASK3",
          "subTaskTicketId": "HB-6496"
        },
        {
          "list": "Implement email format validation and password length validation on the backend",
          "acceptance": "Validate the email format on the server-side using a regular expression and enforce a password minimum length of 8 characters.  \n#### Acceptance Criteria:  \n- Email is validated on the backend to match a standard email format.  \n- Password must be at least 8 characters.  \n- Returns a 422 status code with specific error messages for invalid email or password violations.  \n- Validations are run before storing credentials.",
          "id": "TASK4",
          "subTaskTicketId": "HB-6495"
        },
        {
          "list": "Implement secure password hashing using Ruby on backend",
          "acceptance": "Store the user's password as a hashed value using a secure hashing library in Ruby (e.g., BCrypt).  \n#### Acceptance Criteria:  \n- Use Ruby's BCrypt library to hash the password.  \n- Hashed password is securely stored in memory (data handling specifics depend on external database/task setup).  \n- Clear passwords are never logged or stored in any intermediate steps.  \n- Generate a 500 server error if hashing fails.",
          "id": "TASK5",
          "subTaskTicketId": "HB-6490"
        },
        {
          "list": "Add success response and confirmation message upon registration",
          "acceptance": "Provide a success message upon successful account creation and return an HTTP 200 status code with a confirmation response.  \n#### Acceptance Criteria:  \n- User receives a JSON response upon successful registration, e.g., `{ \"message\": \"Account successfully created.\" }`.  \n- Response is in JSON format with appropriate content-type headers.  \n- Errors during registration do not expose sensitive details, and only generic failure messages are returned.",
          "id": "TASK6",
          "subTaskTicketId": "HB-6493"
        },
        {
          "list": "Write unit tests for backend validations",
          "acceptance": "Develop unit tests to verify email format validation, password length validation, and secure password hashing in the backend code.  \n#### Acceptance Criteria:  \n- Unit tests cover valid and invalid email formats.  \n- Unit tests validate password length criteria (e.g., <8, >=8).  \n- Tests confirm passwords are hashed using BCrypt and not stored in plain text.  \n- All tests pass with no failures or warnings.",
          "id": "TASK7",
          "subTaskTicketId": "HB-6492"
        },
        {
          "list": "Write integration tests for user registration endpoint",
          "acceptance": "Develop integration tests to ensure that the `/register` endpoint correctly handles valid and invalid registration requests end-to-end.  \n#### Acceptance Criteria:  \n- Test valid requests with proper email and password parameters return a 200 HTTP status.  \n- Test invalid email or password formats return a 422 HTTP status with descriptive error messages.  \n- Confirm that hashed passwords are stored in backend during a successful registration flow.",
          "id": "TASK8",
          "subTaskTicketId": "HB-6494"
        }
      ],
      "storyTicketId": "HB-6466",
      "formattedDescription": "Ability to register a user account with validation and secure credential storage  \nIn order to access the platform  \nAs a developer or administrator  \nI want to securely create an...\n\n#### Acceptance Criteria:\n- Users can input and submit email and password to register.  \n- Form fields must validate inputs (e.g., check for valid email formats).  \n- Upon successful registration, users rec..."
    },
    {
      "id": "US2",
      "name": "Multi-Option User Login and Session Management",
      "description": "Ability to log in using email/password or GitHub OAuth and manage secure session tokens  \nIn order to securely access the platform  \nAs a developer or administrator  \nI want to log in seamlessly using my preferred method and have secure, persistent sessions.  \n#### Acceptance Criteria:  \n- Users can log in using email and password.  \n- Users can choose to log in via GitHub OAuth.  \n- Failed login attempts show appropriate error messages.  \n- Successful login redirects the user to their dashboard.  \n- System issues secure session tokens upon login.  \n- Tokens automatically refresh or expire based on activity.  \n- Users are logged out automatically post token expiration.  \n- Tokens are invalidated when the user logs out.",
      "tasks": [
        {
          "list": "Implement email/password login functionality",
          "acceptance": "Develop a back-end method in Ruby to authenticate users using email and password as input. Ensure secure handling of passwords via hashing (e.g., bcrypt) and validate user credentials against the database. Return appropriate error messages for invalid credentials.  \n#### Acceptance Criteria:  \n- Users can log in using email and password.  \n- Failed login attempts display error messages such as 'Invalid email or password'.  \n- Successful authentication redirects users to their dashboard page.  \n- Handling of secure password storage and comparison must be implemented.",
          "id": "TASK9",
          "subTaskTicketId": "HB-6478"
        },
        {
          "list": "Implement GitHub OAuth login functionality",
          "acceptance": "Develop a Ruby function to enable login using GitHub OAuth. Integrate GitHub’s API to allow users to authenticate and retrieve user identifier details for platform access. Handle API response errors gracefully. Ensure that successful oauth authentication redirects users to their dashboard.  \n#### Acceptance Criteria:  \n- Users can log in using GitHub OAuth.  \n- Failed OAuth attempts display error messages such as 'OAuth login failed, please try again'.  \n- Successful authentication redirects users to their dashboard page.  \n- Ensure proper handling of GitHub’s OAuth tokens for security purposes.",
          "id": "TASK10",
          "subTaskTicketId": "HB-6477"
        },
        {
          "list": "Create secure session token generation",
          "acceptance": "Develop a session management module in Ruby to securely generate unique session tokens upon successful login (email/password or GitHub OAuth). Tokens must be cryptographically secure and include expiration properties. Store the session tokens and associate them with the appropriate user identifier in the system.  \n#### Acceptance Criteria:  \n- Secure tokens are generated upon login.  \n- Tokens must have an expiration time based on activity or session duration rules.  \n- Tokens are tied to specific user sessions and persist securely.  \n- Ensure compliance with security standards like encryption for session tokens.",
          "id": "TASK11",
          "subTaskTicketId": "HB-6481"
        },
        {
          "list": "Implement token refresh functionality",
          "acceptance": "Develop logic to refresh session tokens upon user activity in the Ruby session management module. Ensure tokens are refreshed securely and are invalidated upon their expiration without activity. Define a token lifecycle for system compliance.  \n#### Acceptance Criteria:  \n- Tokens automatically refresh based on user activity.  \n- Tokens are invalidated when expiration is reached without activity.  \n- Ensure seamless user experience for active sessions while adhering to security requirements.",
          "id": "TASK12",
          "subTaskTicketId": "HB-6482"
        },
        {
          "list": "Develop automatic logout on token expiration",
          "acceptance": "Implement functionality in the Ruby back-end to automatically log out users when their session tokens expire. Ensure tokens are invalidated in the system upon logout, both manual and automatic.  \n#### Acceptance Criteria:  \n- Users are logged out automatically when their session tokens expire.  \n- Tokens are securely invalidated in the system upon expiration.  \n- Logout behavior adheres to security and activity-based rules.",
          "id": "TASK13",
          "subTaskTicketId": "HB-6476"
        },
        {
          "list": "Develop manual logout functionality",
          "acceptance": "Create a Ruby function to allow users to manually log out from their session. When logout is initiated, invalidate the existing session token immediately and remove associated session data. Redirect logged-out users to the login page.  \n#### Acceptance Criteria:  \n- Users can manually log out via a logout trigger.  \n- Session tokens are invalidated securely upon logout.  \n- Users are redirected to the login page after logout.",
          "id": "TASK14",
          "subTaskTicketId": "HB-6484"
        },
        {
          "list": "Verify secure handling of session tokens",
          "acceptance": "Add validations to ensure secure storage and retrieval of session tokens in the Ruby back-end. Implement encryption mechanisms and verify that tokens are not exposed via unintended requests or logs.  \n#### Acceptance Criteria:  \n- Tokens are encrypted and securely stored.  \n- No session tokens are exposed in request logs or error responses.  \n- Ensure compliance with security best practices for session management.",
          "id": "TASK15",
          "subTaskTicketId": "HB-6480"
        },
        {
          "list": "Develop error message handling for failed logins",
          "acceptance": "Implement Ruby logic to handle failed login attempts for both email/password and GitHub OAuth methods. Return user-friendly error messages directly tied to the failure reason.  \n#### Acceptance Criteria:  \n- Clear and specific error messages displayed for login failures.  \n- Messages include 'Invalid email or password' for email/password failures and 'OAuth login failed' for GitHub OAuth issues.  \n- Ensure no sensitive information is leaked in error responses.",
          "id": "TASK16",
          "subTaskTicketId": "HB-6479"
        },
        {
          "list": "Redirect users to dashboard upon successful login",
          "acceptance": "Implement routing logic in Ruby to redirect users to their dashboard page upon successful authentication via email/password or GitHub OAuth. Verify that only authenticated users can access dashboard functionality.  \n#### Acceptance Criteria:  \n- Successful login (via either method) redirects users to their dashboard.  \n- Unauthenticated users cannot access the dashboard route.  \n- Handling of permissions and secure access to the dashboard is implemented.",
          "id": "TASK17",
          "subTaskTicketId": "HB-6475"
        }
      ],
      "storyTicketId": "HB-6463",
      "formattedDescription": "Ability to log in using email/password or GitHub OAuth and manage secure session tokens  \nIn order to securely access the platform  \nAs a developer or administrator  \nI want to log...\n\n#### Acceptance Criteria:\n- Users can log in using email and password.  \n- Users can choose to log in via GitHub OAuth.  \n- Failed login attempts show appropriate error messages.  \n- Successful login redire..."
    },
    {
      "id": "US3",
      "name": "Password Recovery Process",
      "description": "Ability to recover account access by resetting a password  \nIn order to regain access to my account  \nAs a developer or administrator  \nI want to securely reset my password following a clear recovery process.  \n#### Acceptance Criteria:  \n- Users can initiate password recovery via their registered email.  \n- System sends a secure email with password reset instructions.  \n- Users can set a new password following the reset procedure.  \n- System validates password strength during reset.",
      "tasks": [
        {
          "list": "Create password recovery initiation form",
          "acceptance": "Design and implement an HTML form that allows users to input their registered email address to initiate password recovery. This form should send a POST request to a designated password recovery endpoint using Ruby.   \n#### Acceptance Criteria:   \n- The form uses a single input field for email, linked to a POST action.   \n- Input must include basic email validation before submission.   \n- Form should be styled with basic HTML/CSS for clarity.   \n- Form submission triggers the password recovery workflow by sending a POST request to the backend with the provided email.",
          "id": "TASK18",
          "subTaskTicketId": "HB-6502"
        },
        {
          "list": "Implement password recovery endpoint",
          "acceptance": "Develop a Ruby-based backend endpoint to handle password recovery requests. This endpoint should validate the existence of the provided email in the system's database.   \n#### Acceptance Criteria:   \n- The endpoint must accept the POST request containing the user's email address.   \n- Search the database (e.g., using ActiveRecord) for the user tied to the provided email.   \n- If the email does not exist, return an appropriate error response.   \n- If the email exists, generate a secure, time-limited token for password reset.   \n- Save the token securely in the database associated with the user record.   \n- Respond with a success message if the email exists and processing is completed.   \n- Return a 400 error with a descriptive message if the provided email is invalid.",
          "id": "TASK19",
          "subTaskTicketId": "HB-6499"
        },
        {
          "list": "Send password recovery email with reset instructions",
          "acceptance": "Integrate an email-sending feature using Ruby to deliver a secure email to the user, containing the password reset instructions and token-generated link.   \n#### Acceptance Criteria:   \n- Format the email with clear instructions for resetting the password.   \n- Include a secure password reset link containing the token as a query parameter (e.g., /password_reset?token=<token>).   \n- Use a library or framework within Ruby for sending the email (e.g., ActionMailer).   \n- Ensure the email only sends if the provided email exists in the system.   \n- Log the email sending action for debugging/auditing purposes.   \n- If email delivery fails, return an error response with adequate debugging information.",
          "id": "TASK20",
          "subTaskTicketId": "HB-6500"
        },
        {
          "list": "Create HTML form for new password input",
          "acceptance": "Design an HTML page that allows users to enter a new password. This page is accessed using the token sent in the email. It should submit the token and new password to the backend for processing.   \n#### Acceptance Criteria:   \n- The form must include two input fields (new password and confirm password) and a hidden field for the token.   \n- Ensure both password fields match on the client side before submission.   \n- Validate password strength before submitting (minimum 8 characters, includes upper and lower case, a number, and a special character).   \n- Submit the form as a POST action to a predefined reset-password backend endpoint.   \n- Provide basic error messages for password mismatch or failure to meet strength rules.",
          "id": "TASK21",
          "subTaskTicketId": "HB-6501"
        },
        {
          "list": "Implement password reset endpoint",
          "acceptance": "Create a backend endpoint in Ruby to process the password reset request by verifying the token and updating the user's password upon successful validation.   \n#### Acceptance Criteria:   \n- Endpoint must accept the token and new password via POST request.   \n- Validate the token against the records in the database and ensure it has not expired.   \n- If the token is invalid or expired, return an error response with appropriate status.   \n- Validate the new password strength (minimum 8 characters, includes upper and lower case, a number, and a special character).   \n- Hash the new password securely before storing it in the database.   \n- Update the user record with the new password hash and invalidate the used token.   \n- Respond with a success message upon completion of the reset process.   \n- Return a 400 error if the validation fails, with a descriptive error message.",
          "id": "TASK22",
          "subTaskTicketId": "HB-6498"
        },
        {
          "list": "Validate password reset process with automated tests",
          "acceptance": "Create automated tests using Ruby to verify the full password reset process, ensuring compliance with user story requirements and error handling.   \n#### Acceptance Criteria:   \n- Test cases must include triggering password reset with a valid email.   \n- Validate email sending for registered users.   \n- Ensure invalid emails are handled with appropriate responses.   \n- Test the token validation logic, ensuring expired and invalid tokens are rejected.   \n- Test that valid tokens allow password updates.   \n- Validate password strength rules during updates.   \n- Verify the entire workflow end-to-end, including successful email sending, token validation, and password reset.",
          "id": "TASK23",
          "subTaskTicketId": "HB-6497"
        }
      ],
      "storyTicketId": "HB-6467",
      "formattedDescription": "Ability to recover account access by resetting a password  \nIn order to regain access to my account  \nAs a developer or administrator  \nI want to securely reset my password followi...\n\n#### Acceptance Criteria:\n- Users can initiate password recovery via their registered email.  \n- System sends a secure email with password reset instructions.  \n- Users can set a new password following the..."
    },
    {
      "id": "US4",
      "name": "Role-Based Access Management",
      "description": "Ability to manage user roles and access permissions based on roles  \nIn order to control feature access and repository permissions  \nAs a developer or administrator managing teams  \nI want roles to define and restrict access appropriately across the platform.  \n#### Acceptance Criteria:  \n- Administrators can assign roles to users.  \n- Developers are restricted to their repository access.  \n- Role changes reflect in real-time.  \n- Unauthorized actions show proper error messages.",
      "tasks": [
        {
          "list": "Create Role Data Model and Define Associations",
          "acceptance": "Define the role data structure in Ruby with the appropriate fields (e.g., `id`, `name`, `permissions`). Establish associations to users.  \n#### Acceptance Criteria:  \n- Role data model is defined with fields: `id`, `name`, `permissions`.  \n- User model is updated to associate each user with a role.  \n- Able to create, delete, and modify roles programmatically.  \n- Validations for role uniqueness and required fields are implemented.",
          "id": "TASK24",
          "subTaskTicketId": "HB-6483"
        },
        {
          "list": "Implement Role Assignment Functionality for Administrators",
          "acceptance": "Add the ability for administrators to assign roles to users. Update the business logic to ensure role assignments are restricted to administrators.  \n#### Acceptance Criteria:  \n- Method to assign and update roles for a user is implemented in Ruby.  \n- Only users with administrator privileges can assign or change roles.  \n- Errors are returned if a non-administrator attempts role assignment.  \n- Successful role assignments update the user’s record in the database.",
          "id": "TASK25",
          "subTaskTicketId": "HB-6485"
        },
        {
          "list": "Restrict Repository Access Based on Role",
          "acceptance": "Implement a method to check if a user's role permits access to a repository. Restrict access for developers to only their assigned repositories.  \n#### Acceptance Criteria:  \n- A method is implemented that validates if a user’s role allows access to a specific repository.  \n- The method restricts non-administrators and non-assigned developers from accessing unauthorized repositories.  \n- Errors are returned for unauthorized access attempts with a proper error message.",
          "id": "TASK26",
          "subTaskTicketId": "HB-6487"
        },
        {
          "list": "Ensure Real-Time Role Change Effect",
          "acceptance": "Implement a mechanism to ensure role changes are reflected in real-time without requiring manual intervention.  \n#### Acceptance Criteria:  \n- Updates to a user’s role immediately propagate, and access permissions adjust dynamically.  \n- Real-time changes are verified by ensuring subsequent feature access reflects the updated role without requiring a page reload.  \n- Error handling ensures role-change logic does not fail silently.",
          "id": "TASK27",
          "subTaskTicketId": "HB-6488"
        },
        {
          "list": "Display Error Messages for Unauthorized Actions",
          "acceptance": "Add error handling and appropriate user feedback for unauthorized role-based actions in the UI.  \n#### Acceptance Criteria:  \n- Proper error messages like 'Access Denied: Insufficient Permissions' are displayed for unauthorized actions.  \n- Backend returns an error response with relevant status codes (e.g., 403 Forbidden) for unauthorized attempts.  \n- Frontend displays user-friendly error messaging when backend returns an unauthorized error.  \n- Error handling is tested to ensure no sensitive information is exposed in error messages.",
          "id": "TASK28",
          "subTaskTicketId": "HB-6486"
        }
      ],
      "storyTicketId": "HB-6465",
      "formattedDescription": "Ability to manage user roles and access permissions based on roles  \nIn order to control feature access and repository permissions  \nAs a developer or administrator managing teams...\n\n#### Acceptance Criteria:\n- Administrators can assign roles to users.  \n- Developers are restricted to their repository access.  \n- Role changes reflect in real-time.  \n- Unauthorized actions show proper er..."
    },
    {
      "id": "US5",
      "name": "Feature Screens for Registration, Login, and Password Recovery",
      "description": "Ability to display user-facing screens for account registration, login, and password recovery processes  \nIn order to enable users to access or regain access to their accounts  \nAs a developer or administrator  \nI want user-friendly screens for account creation, login, and password recovery.  \n#### Acceptance Criteria:  \n- A registration screen is available for new users.  \n- A login screen supports options for email/password and GitHub OAuth login.  \n- A password recovery screen allows users to initiate and complete the recovery process.  \n- Screens have clear feedback and error messages for the respective processes.",
      "tasks": [
        {
          "list": "Create the HTML structure for the Registration Screen",
          "acceptance": "Implement the user-facing registration screen in HTML as per the user story. It should include input fields for email, password, and any necessary validations.  \n#### Acceptance Criteria:  \n1. The screen has functional, labeled input fields for `email` and `password`.  \n2. Input fields have client-side validation (e.g., required fields, valid email format).  \n3. Display error messages for invalid inputs (e.g., 'Email must be valid').  \n4. Provide a clear feedback mechanism for successful registration.",
          "id": "TASK29",
          "subTaskTicketId": "HB-6471"
        },
        {
          "list": "Implement server-side logic for Registration",
          "acceptance": "Develop server-side functionality in Ruby to process data from the Registration screen. This includes authorization, form validation, and persistence.  \n#### Acceptance Criteria:  \n1. Accept and validate email and password inputs.  \n2. Ensure email uniqueness before storing user data.  \n3. Provide error feedback for invalid or duplicate entries.  \n4. Return success or error responses to the registration screen.",
          "id": "TASK30",
          "subTaskTicketId": "HB-6468"
        },
        {
          "list": "Create the HTML structure for the Login Screen",
          "acceptance": "Design and implement the user-facing login screen in HTML. The screen should support both email/password login and GitHub OAuth login options.  \n#### Acceptance Criteria:  \n1. The screen has input fields for `email` and `password`.  \n2. Include a button/link for GitHub OAuth login.  \n3. Display client-side validation error messages (e.g., missing fields).  \n4. Provide feedback for successful logins or errors like 'Invalid credentials'.",
          "id": "TASK31",
          "subTaskTicketId": "HB-6470"
        },
        {
          "list": "Implement server-side logic for Login functionality",
          "acceptance": "Develop backend logic in Ruby for handling email/password authentication and GitHub OAuth login. Integrate third-party API handling as required.  \n#### Acceptance Criteria:  \n1. Authenticate users against stored credentials in the server (email/password).  \n2. Use GitHub OAuth APIs to authenticate users via GitHub.  \n3. Return appropriate responses for success or failure scenarios.  \n4. Provide detailed error messages such as 'Account not found' or 'Invalid GitHub token'.",
          "id": "TASK32",
          "subTaskTicketId": "HB-6473"
        },
        {
          "list": "Create the HTML structure for the Password Recovery Screen",
          "acceptance": "Design and implement the user-facing password recovery screen in HTML. It should allow users to initiate and complete the recovery process.  \n#### Acceptance Criteria:  \n1. Provide an input field for users to enter their registered email.  \n2. Include a submit button to initiate the recovery process.  \n3. Display client-side validation messages for errors (e.g., 'Email field cannot be empty').  \n4. Provide feedback for successful initiation, such as 'Recovery instructions sent to your email'.",
          "id": "TASK33",
          "subTaskTicketId": "HB-6474"
        },
        {
          "list": "Implement server-side logic for Password Recovery functionality",
          "acceptance": "Develop server-side functionality in Ruby to handle password recovery requests. This includes initiating recovery and finalizing the password update process.  \n#### Acceptance Criteria:  \n1. Validate the submitted email against stored user records.  \n2. Send password recovery instructions via email using Azure services.  \n3. Return success or error responses to the recovery screen.  \n4. Ensure secure handling of recovery tokens and validation for token-based password updates.",
          "id": "TASK34",
          "subTaskTicketId": "HB-6472"
        },
        {
          "list": "Add error and feedback message handling across screens",
          "acceptance": "Implement consistent error feedback mechanisms across all screens (Registration, Login, Password Recovery). Ensure messages are actionable and user-friendly.  \n#### Acceptance Criteria:  \n1. All input fields across screens provide instant client-side validation feedback.  \n2. Server-side errors are displayed clearly on the respective screens.  \n3. Success messages are implemented for completed actions (e.g., 'Registration successful', 'Password changed successfully').  \n4. Ensure consistent UI layout for error messages (e.g., placement, styling).",
          "id": "TASK35",
          "subTaskTicketId": "HB-6469"
        }
      ],
      "storyTicketId": "HB-6464",
      "formattedDescription": "Ability to display user-facing screens for account registration, login, and password recovery processes  \nIn order to enable users to access or regain access to their accounts  \nAs...\n\n#### Acceptance Criteria:\n- A registration screen is available for new users.  \n- A login screen supports options for email/password and GitHub OAuth login.  \n- A password recovery screen allows users to in..."
    }
  ],
  "archivedFeatures": []
}
